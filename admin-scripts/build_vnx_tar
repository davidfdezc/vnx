#!/bin/bash


# Parse arguments
while getopts "vi" opt; do
  echo "Options:"
  case $opt in
    v)
      echo "Verbose mode" >&2
      VERBOSE=yes
      ;;
    i)
      echo "Install on idefix repository" >&2
	  UPDATEIDEFIX=yes 
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
	  echo "Usage: build_tar_and_install_vnx [-i] [-v]"
	  echo "           -i copies the new version to idefix repository (only if executed from idefix)"
	  echo "           -v verbose mode"
      ;;
  esac
done


#
# Version format: major.minor.revision
#

RELDATE=$( date +%d/%m/%Y_%H:%M )

# Load current version numbers
cdir=$( dirname $0 )
source $cdir/VERSION

#VNX_LATEST_REVISION=$( wget -q -O - http://idefix.dit.upm.es/cgi-bin/get-new-vnx-revision.php | \
#         sed -e 's/<vnx_build_ver>\(.*\)<\/vnx_build_ver>/\1/' )

#
# Build version names
#
VNX_NEW_REVISION=`expr $VNX_LATEST_REVISION + 1`
VNX_VERSION=${VNX_MAJOR}.${VNX_MINOR}.${VNX_NEW_REVISION}
VNX_VERSION_DATE=${VNX_VERSION}-`date +%Y%m%d%H%M`

#
# User must have the latest version of this file, check repositories
#
echo "** "
echo "** Will now build VNX tar file, version $VNX_VERSION"
echo "** "

#echo "** IMPORTANT NOTE: Before running this script, please make sure to pull the latest project changeset from the repositories in order to synchronize version numbers."
#read -p "** Continue? (y/n)" -n 1
#if [[ ! $REPLY =~ ^[Yy]$ ]]
#then
#  echo "** cancelled."
#  echo ""
#  exit 1
#fi
#echo "** "


#
# Other versions and tar file name
#
#ACED_OLIVE_VERSION="0.1b"  # -`date +%Y%m%d%H%M`"
ACED_OLIVE_VERSION=$VNX_VERSION
#ACED_LF_VERSION="0.1b"  # -`date +%Y%m%d%H%M`"
ACED_LF_VERSION=$VNX_VERSION
ACED_WIN_VERSION="0.1b"
#ROOTFS_VERSION="es-v023b"
FNAME=vnx-${VNX_VERSION_DATE}

#
# Move to the upper directory where this script is
#
cdir=$( dirname $0 )
cd $cdir/..

#
# Create tar file dir
#
echo "** "
echo "** Creating ${FNAME}.tgz file... "
mkdir -p distrib
mkdir -p tmp
rm -rf tmp/*
mkdir -p tmp/${FNAME}


#
# Create ACE tar files
#
mkdir -p tmp/aced
rm -rf tmp/aced/*
#
# Olive
#
echo "**   Creating vnx-aced-olive-${ACED_OLIVE_VERSION}.tgz file... "
mkdir -p tmp/aced/vnx-aced-olive-$ACED_OLIVE_VERSION
cp vnx-autoconf/open-source/olive/*  tmp/aced/vnx-aced-olive-$ACED_OLIVE_VERSION
# Update version numbers in olived
sed --in-place -e "s%DD/MM/YYYY%$RELDATE%"     tmp/aced/vnx-aced-olive-$ACED_OLIVE_VERSION/vnxolived
sed --in-place -e "s%MM.mm.rrrr%$VNX_VERSION%" tmp/aced/vnx-aced-olive-$ACED_OLIVE_VERSION/vnxolived
cd tmp/aced
if [ $VERBOSE ]; then
    tar cfvz vnx-aced-olive-${ACED_OLIVE_VERSION}.tgz vnx-aced-olive-$ACED_OLIVE_VERSION
else
    tar cfz vnx-aced-olive-${ACED_OLIVE_VERSION}.tgz vnx-aced-olive-$ACED_OLIVE_VERSION
fi
rm -rf vnx-aced-olive-$ACED_OLIVE_VERSION
cd ../..
#
# Windows
#
cp vnx-autoconf/windows/vnx-aced-win-${ACED_WIN_VERSION}.exe tmp/aced

#
# Linux & Freebsd
#
echo "**   Creating vnx-aced-lf-${ACED_LF_VERSION}.tgz file... "
mkdir -p tmp/aced/vnx-aced-lf-$ACED_LF_VERSION
cp -r vnx-autoconf/open-source/freebsd \
      vnx-autoconf/open-source/linux \
      vnx-autoconf/open-source/linux/vnxaced.pl \
      vnx-autoconf/open-source/linux/install_vnxaced \
      vnx-autoconf/open-source/linux/uninstall_vnxaced \
      vnx-autoconf/open-source/linux/vnx_halt \
      tmp/aced/vnx-aced-lf-$ACED_LF_VERSION
# Update version in vnxaced
sed --in-place -e "s%DD/MM/YYYY%$RELDATE%"     tmp/aced/vnx-aced-lf-$ACED_LF_VERSION/vnxaced.pl
sed --in-place -e "s%MM.mm.rrrr%$VNX_VERSION%" tmp/aced/vnx-aced-lf-$ACED_LF_VERSION/vnxaced.pl
cd tmp/aced
if [ $VERBOSE ]; then
    tar cfvz vnx-aced-lf-${ACED_LF_VERSION}.tgz vnx-aced-lf-$ACED_LF_VERSION
else
    tar cfz vnx-aced-lf-${ACED_LF_VERSION}.tgz vnx-aced-lf-$ACED_LF_VERSION
fi
rm -rf vnx-aced-lf-$ACED_LF_VERSION
cd ../..


#
# Copy all the files to tmp/${FNAME} directory to build the tar file from there 
#
echo "**   Copying files... "
cp -r vnx-folder/doc  \
      vnx-folder/etc  \
      vnx-folder/bin  \
      vnx-folder/perl-modules \
      vnx-folder/data \
      vnx-folder/lib \
      tmp/aced        \
      vnx-ediv/bin    \
      vnx-ediv/etc    \
      vnx-ediv/perl-modules \
      tmp/${FNAME}

#
# Update version numbers
#
echo "**   Updating version numbers... "
echo "**   \$release=$RELDATE"
echo "** "
sed --in-place -e "s%DD/MM/YYYY%$RELDATE%" tmp/${FNAME}/bin/vnx.pl
sed --in-place -e "s%MM.mm.rrrr%$VNX_VERSION%" tmp/${FNAME}/bin/vnx.pl
sed --in-place -e "s%DD/MM/YYYY%$RELDATE%" tmp/${FNAME}/bin/ediv_ctl_vnx.pl
sed --in-place -e "s%MM.mm.rrrr%$VNX_VERSION%" tmp/${FNAME}/bin/ediv_ctl_vnx.pl
sed --in-place -e "s%DD/MM/YYYY%$RELDATE%"     tmp/${FNAME}/bin/vnx_download_rootfs.sh
sed --in-place -e "s%MM.mm.rrrr%$VNX_VERSION%" tmp/${FNAME}/bin/vnx_download_rootfs.sh


# 
# Plugins
#
echo "**   Copying plugins... "
mkdir -p tmp/${FNAME}/plugins
rm -rf tmp/${FNAME}/plugins/*
mkdir -p tmp/${FNAME}/plugins/examples
if [ $VERBOSE ]; then
    OPTV="-v"
fi
# For each plugin
for p in `ls vnx-plugins`
do 
    if [ -f vnx-plugins/$p/$p.pm ]; then
	   cp $OPTV vnx-plugins/$p/$p.pm  tmp/${FNAME}/plugins
	fi 
#    cp $VERBOSE vnx-plugins/$p/$p.dtd tmp/${FNAME}/plugins 
    if [ -f vnx-plugins/$p/$p.xsd ]; then
        cp $OPTV vnx-plugins/$p/$p.xsd tmp/${FNAME}/plugins
    fi 
    if [ "$( ls -A vnx-plugins/$p/examples/ )" ]; then
        cp $OPTV -r vnx-plugins/$p/examples/* tmp/${FNAME}/plugins/examples
    fi 
done

#
# Copy install script
#
cp admin-scripts/install_vnx tmp/${FNAME}
mv tmp/${FNAME}/doc/00-readme.txt tmp/${FNAME}

#
# Update VERSION file with the new value of VNX_LATEST_REVISION 
#
sed --in-place -e 's/^VNX_LATEST_REVISION.*/VNX_LATEST_REVISION\=\"'$VNX_NEW_REVISION'"/g' admin-scripts/VERSION

# 
# Create VERSION file
#
cat $cdir/VERSION > tmp/${FNAME}/VERSION 

#
# Create tar file and move it to distrib directory
#
cd tmp
if [ $VERBOSE ]; then
    tar cfvz  ${FNAME}.tgz ${FNAME}
else
    tar cfz  ${FNAME}.tgz ${FNAME}
fi
mv ${FNAME}.tgz ../distrib
cd ../distrib
#
# Create a symbolic link named vnx-latest.tgz to the new version
# 
rm vnx-latest.tgz
ln -s ${FNAME}.tgz vnx-latest.tgz
# rm -rf tmp/*
cd ..

echo "** "
echo "** ...done"
echo "** "

#
# Copy new version to idefix webserver (only if this script is executed from idefix)
#
HNAME=$( hostname -f )
#echo "$HNAME..."
if [ $UPDATEIDEFIX ]; then
	if [ $HNAME = 'idefix.dit.upm.es' -o $HNAME = 'idefix' ]; then
	  if [ -d /var/www/download/vnx ]; then 
	    echo "Copying new version to http://idefix.dit.upm.es/download/vnx..."
	    cp -v distrib/${FNAME}.tgz /var/www/download/vnx
	    rm -v /var/www/download/vnx/vnx-latest.tgz
	    ln -s /var/www/download/vnx/${FNAME}.tgz /var/www/download/vnx/vnx-latest.tgz
	    echo "...done"
	  fi  
	fi
fi

#echo "** REMINDER: This script has been modified, please make sure to push the new changeset to the repositories, in order to register the new version."

